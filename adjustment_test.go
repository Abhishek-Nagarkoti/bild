package bild

import (
	"image"
	"testing"
)

func TestBrightness(t *testing.T) {
	cases := []struct {
		desc     string
		percent  float64
		value    image.Image
		expected *image.RGBA
	}{
		{
			desc:    "+100%",
			percent: 1.0,
			value: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
			expected: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0xFF, 0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0xFF, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
		},
		{
			desc:    "+0%",
			percent: 0.0,
			value: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
			expected: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
		},
		{
			desc:    "+50%",
			percent: 0.50,
			value: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
			expected: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0xC0, 0xC0, 0xC0, 0x80, 0xC0, 0xC0, 0xC0, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
		},
		{
			desc:    "-100%",
			percent: -1.0,
			value: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
			expected: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0xFF,
					0x0, 0x0, 0x0, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
		},
	}

	for _, c := range cases {
		actual := Brightness(c.value, c.percent)
		if !rgbaImageEqual(actual, c.expected) {
			t.Error(testFailMessage("Brightness "+c.desc, c.expected, actual))
		}
	}
}

func TestGamma(t *testing.T) {
	cases := []struct {
		desc     string
		gamma    float64
		value    image.Image
		expected *image.RGBA
	}{
		{
			desc:  "1.0",
			gamma: 1.0,
			value: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
			expected: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
		},
		{
			desc:  "0",
			gamma: 0.0,
			value: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
			expected: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xff,
					0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff,
				},
			},
		},
		{
			desc:  "2.2",
			gamma: 2.2,
			value: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
			expected: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0xbb, 0xbb, 0xbb, 0x80, 0xbb, 0xbb, 0xbb, 0xff,
					0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0xff,
				},
			},
		},
		{
			desc:  "0.5",
			gamma: 0.5,
			value: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF,
					0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0xFF,
				},
			},
			expected: &image.RGBA{
				Rect:   image.Rect(0, 0, 2, 2),
				Stride: 8,
				Pix: []uint8{
					0x41, 0x41, 0x41, 0x80, 0x41, 0x41, 0x41, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0, 0x0, 0x0, 0xff,
				},
			},
		},
	}

	for _, c := range cases {
		actual := Gamma(c.value, c.gamma)
		if !rgbaImageEqual(actual, c.expected) {
			t.Error(testFailMessage("Gamma "+c.desc, c.expected, actual))
		}
	}
}
